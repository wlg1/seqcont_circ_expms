# -*- coding: utf-8 -*-
"""generate_data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ckybT8q8cIkdxceWQa7ZJGWVD7oRN-JF

# Setup
"""

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# %pip install git+https://github.com/neelnanda-io/TransformerLens.git
# !pip install faker

import torch
from typing import Optional
import copy

import transformer_lens.utils as utils  # for test prompts
from transformer_lens import HookedTransformer
torch.set_grad_enabled(False)

"""## Load Model"""

model = HookedTransformer.from_pretrained(
    "gpt2-small",
    center_unembed=True,
    center_writing_weights=True,
    fold_ln=True,
    refactor_factored_attn_matrices=True,
)

"""## Import functions from repo"""

# Commented out IPython magic to ensure Python compatibility.
!git clone https://github.com/apartresearch/seqcont_circuits.git
# %cd /content/seqcont_circuits/src/generate_data

from generate_data import *

"""# numwords, months- names"""

from faker import Faker

# Generate 100 unique first names
fake = Faker()
first_names = set()
while len(first_names) < 500:
    first_name = fake.first_name()
    first_names.add(first_name)
first_names = list(first_names)

names = filter_to_single_token(model, first_names)
len(names)

# "Claire was born in February. John was born in March. Eve was born in April. Bob was born in”
prompts_list = generate_prompts_list(0, 8, names[:100], 'born')

# Replace the month names in the data
prompts_list_months = replace_nw_seqtype(prompts_list, 'months')

good_prompts, good_prompts_months, all_probs = get_good_prompts_nw_months(model, prompts_list, prompts_list_months)

print(len(good_prompts))
print(len(good_prompts_months))

example_prompt = good_prompts[57]['text']
example_answer = good_prompts[57]['corr']
utils.test_prompt(example_prompt, example_answer, model, prepend_bos=True)

example_prompt = good_prompts_months[50]['text']
example_answer = good_prompts_months[50]['corr']
utils.test_prompt(example_prompt, example_answer, model, prepend_bos=True)

with open('nw_prompts_names.pkl', 'wb') as file:
    pickle.dump(good_prompts, file)
files.download('nw_prompts_names.pkl')

with open('months_prompts_names.pkl', 'wb') as file:
    pickle.dump(good_prompts_months, file)
files.download('months_prompts_names.pkl')

plt.hist([probs[0].item() for probs in all_probs], bins = 20, edgecolor='black')
plt.xlabel('probs')
plt.ylabel('Frequency')
plt.title('Distribution')

freqs = {}
for pd in good_prompts_months:
    if pd['S1'] not in freqs:
        freqs[pd['S1']] = 1
    else:
        freqs[pd['S1']] += 1
freqs

freqs = {}
for pd in good_prompts:
    if pd['S1'] not in freqs:
        freqs[pd['S1']] = 1
    else:
        freqs[pd['S1']] += 1
freqs

"""# numwords, months- lost"""

# List of common, short words which are likely to be single tokens in GPT-2
common_words = [
    "Apple", "Ball", "Car", "Dog", "Egg", "Fish", "Gold", "Hat", "Ink", "Jar",
    "Kite", "Lamp", "Moon", "Nest", "Owl", "Pig", "Quilt", "Rat", "Sun", "Tree",
    "Umbrella", "Vase", "Wolf", "Yarn", "Zip", "Bird", "Cat", "Drum", "Frog",
    "Grape", "House", "Ice", "Juice", "Key", "Leaf", "Map", "Nut", "Orange",
    "Piano", "Queen", "Ring", "Star", "Train", "Van", "Whale", "Xylophone",
    "Yacht", "Zebra", "Ax", "Box", "Cow", "Desk", "Ear", "Fan", "Gate", "Hill",
    "Iron", "Joke", "King", "Lion", "Milk", "Nose", "Oil", "Pen", "Quiz", "Rose",
    "Shoe", "Tail", "Vine", "Wall", "Year", "Ant", "Bug", "Corn", "Duck", "Fire",
    "Grass", "Hand", "Island", "Jam", "Knee", "Lake", "Mouse", "Nail", "Pear",
    "Quack", "Road", "Sand", "Tent", "Valley", "Wind", "Yard", "Arm", "Boat",
    "Cake", "Door", "Eye", "Flag", "Horse", "Jeep", "Knife", "Light", "Mountain",
    "Night", "Ocean", "Plate", "Queen", "Rain", "Snow", "Tree", "Umbrella",
    "Valley", "Window", "Yogurt", "Zoo", "Balloon", "Bicycle", "Car", "Doll", "Eagle", "Flag", "Giraffe", "Helmet", "Igloo", "Jacket",
    "Kite", "Lion", "Monkey", "Nest", "Oven", "Pencil", "Quill", "Rabbit", "Star", "Truck",
    "Umbrella", "Violin", "Whale", "Xylophone", "Yak", "Zebra", "Apple", "Banana", "Camera", "Drum",
    "Elephant", "Fork", "Glass", "House", "Island", "Jewel", "Kangaroo", "Lamp", "Mountain", "Notebook",
    "Orange", "Piano", "Queen", "Rose", "Snake", "Tiger", "Urn", "Vase", "Window", "Xerox",
    "Yoyo", "Zipper", "Anchor", "Brush", "Clock", "Dress", "Easel", "Fan", "Guitar", "Harp",
    "Ink", "Jug", "Knife", "Leaf", "Mirror", "Nut", "Owl", "Penguin", "Quartz", "Ring",
    "Spoon", "Table", "Ukulele", "Van", "Watch", "X-ray", "Yarn", "Zucchini", "Artichoke", "Broccoli",
    "Cup", "Desk", "Egg", "Fridge", "Grape", "Hose", "Iris", "Jackal", "Kettle", "Lizard",
    "Mango", "Napkin", "Ostrich", "Peacock", "Quokka", "Racoon", "Seal", "Tulip", "Urchin", "Violet",
    "apple", "ball", "chair", "desk", "elephant", "flower", "guitar", "hat", "jug", "kite",
    "lamp", "mirror", "orange", "piano", "quilt", "ring", "television", "umbrella", "violin", "watch",
    "yacht", "zebra", "book", "cup", "drone", "fridge", "gloves", "helmet", "igloo", "jacket",
    "key", "lemon", "mug", "nail", "octopus", "pillow", "robot", "spoon", "tree", "unicorn",
    "vase", "wheel", "yo-yo", "zipper", "backpack", "camera", "dumbbell", "envelope", "flashlight", "goggles",
    "hammer", "ink", "jeans", "ladder", "microphone", "nest", "owl", "penguin", "quill", "ruler",
    "scissors", "tent", "volcano", "wallet", "yogurt", "zucchini", "accordion", "bicycle", "candle", "dice",
    "egg", "fan"
    ]

random_single_word_objects = [obj.capitalize() for obj in common_words]
random_single_word_objects = filter_to_single_token(model, random_single_word_objects)
len(random_single_word_objects)

prompts_list = generate_prompts_list(0, 8, random_single_word_objects, 'lost')

prompts_list_months = replace_nw_seqtype(prompts_list, 'months')

good_prompts, good_prompts_months, all_probs = get_good_prompts_nw_months(model, prompts_list, prompts_list_months)

with open('nw_prompts_lost.pkl', 'wb') as file:
    pickle.dump(good_prompts, file)
files.download('nw_prompts_lost.pkl')

with open('months_prompts_lost.pkl', 'wb') as file:
    pickle.dump(good_prompts_months, file)
files.download('months_prompts_lost.pkl')

plt.hist([probs[0].item() for probs in all_probs], bins = 20, edgecolor='black')
plt.xlabel('probs')
plt.ylabel('Frequency')
plt.title('Distribution')

freqs = {}
for pd in good_prompts_months:
    if pd['S1'] not in freqs:
        freqs[pd['S1']] = 1
    else:
        freqs[pd['S1']] += 1
freqs

freqs = {}
for pd in good_prompts:
    if pd['S1'] not in freqs:
        freqs[pd['S1']] = 1
    else:
        freqs[pd['S1']] += 1
freqs

"""# numwords, months- done"""

prompts_list = generate_prompts_list(0, 8, random_single_word_objects, 'done')

prompts_list_months = replace_nw_seqtype(prompts_list, 'months')

good_prompts, good_prompts_months, all_probs = get_good_prompts_nw_months(model, prompts_list, prompts_list_months)

with open('nw_prompts_done.pkl', 'wb') as file:
    pickle.dump(good_prompts, file)
files.download('nw_prompts_done.pkl')

with open('months_prompts_done.pkl', 'wb') as file:
    pickle.dump(good_prompts_months, file)
files.download('months_prompts_done.pkl')

plt.hist([probs[0].item() for probs in all_probs], bins = 20, edgecolor='black')
plt.xlabel('probs')
plt.ylabel('Frequency')
plt.title('Distribution')

freqs = {}
for pd in good_prompts_months:
    if pd['S1'] not in freqs:
        freqs[pd['S1']] = 1
    else:
        freqs[pd['S1']] += 1
freqs

freqs = {}
for pd in good_prompts:
    if pd['S1'] not in freqs:
        freqs[pd['S1']] = 1
    else:
        freqs[pd['S1']] += 1
freqs

"""# numerals- names"""

file_name = 'nw_prompts_names.pkl'
with open(file_name, 'rb') as file:
    prompts_list = pickle.load(file)

prompts_list = replace_nw_seqtype(prompts_list, 'numerals')

good_prompts, all_probs = get_good_prompts_numerals(model, prompts_list)

with open('digits_prompts_names.pkl', 'wb') as file:
    pickle.dump(good_prompts, file)
files.download('digits_prompts_names.pkl')

plt.hist([probs[0].item() for probs in all_probs], bins = 20, edgecolor='black')
plt.xlabel('probs')
plt.ylabel('Frequency')
plt.title('Distribution')

"""# numerals- lost"""

file_name = 'nw_prompts_lost.pkl'
with open(file_name, 'rb') as file:
    prompts_list = pickle.load(file)

prompts_list = replace_nw_seqtype(prompts_list, 'numerals')

good_prompts, all_probs = get_good_prompts_numerals(model, prompts_list)

with open('digits_prompts_lost.pkl', 'wb') as file:
    pickle.dump(good_prompts, file)
files.download('digits_prompts_lost.pkl')

plt.hist([probs[0].item() for probs in all_probs], bins = 20, edgecolor='black')
plt.xlabel('probs')
plt.ylabel('Frequency')
plt.title('Distribution')

"""# numerals- done"""

file_name = 'nw_prompts_done.pkl'
with open(file_name, 'rb') as file:
    prompts_list = pickle.load(file)

prompts_list = replace_nw_seqtype(prompts_list, 'numerals')

good_prompts, all_probs = get_good_prompts_numerals(model, prompts_list)

with open('digits_prompts_done.pkl', 'wb') as file:
    pickle.dump(good_prompts, file)
files.download('digits_prompts_done.pkl')

plt.hist([probs[0].item() for probs in all_probs], bins = 20, edgecolor='black')
plt.xlabel('probs')
plt.ylabel('Frequency')
plt.title('Distribution')